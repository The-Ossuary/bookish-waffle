ossuary-frontend/src/index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  background-color: #1b1b1b;
  color: #f0f0e6;
  font-family: -apple-system, BlinkMacSystemFont, serif;
}

ossuary-frontend/tailwind.config.js

/** @type {import('tailwindcss').Config} */
export default {
  content: ["./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      colors: {
        "osien-dark": "#1b1b1b",
        "bone-white": "#f0f0e6",
        "crypt-gray": "#444",
      },
      fontFamily: {
        serif: ["Times New Roman", "serif"],
      },
    },
  },
  plugins: [],
};

ossuary-frontend/vite.config.ts

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
});

ossuary-frontend/src/constants.ts

export const OSIEN_ADDRESS = "0xYourOSIENAddress";
export const THE_OSSUARY_ADDRESS = "0xYourTheOssuaryAddress";
export const THE_OSSUARY_ABI = []; // Paste your compiled ABI here

src/App.tsx

import { ConnectButton } from '@rainbow-me/rainbowkit';
import RitualAltar from './components/RitualAltar';
import LoreVault from './components/LoreVault';
import BookOfBone from './components/BookOfBone';
import './index.css';

function App() {
  return (
    <div className="min-h-screen bg-osien-dark text-bone-white font-serif p-6">
      <header className="text-4xl mb-6">The Ossuary</header>
      <ConnectButton />
      <RitualAltar />
      <LoreVault />
      <BookOfBone />
    </div>
  );
}

export default App;


src/components/RitualAltar.tsx`

import { useState } from 'react';
import { useAccount } from 'wagmi';
import { ethers } from 'ethers';
import { THE_OSSUARY_ADDRESS, THE_OSSUARY_ABI } from '../constants';

export default function RitualAltar() {
  const { address } = useAccount();
  const [loading, setLoading] = useState(false);

  const handleRitual = async () => {
    try {
      setLoading(true);
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const contract = new ethers.Contract(THE_OSSUARY_ADDRESS, THE_OSSUARY_ABI, signer);
      const tx = await contract.performRitual("Bonechant", "Obsen", ethers.parseEther("0.1"), 1, address);
      await tx.wait();
      alert('Ritual complete!');
    } catch (e) {
      console.error(e);
      alert('Ritual failed!');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-crypt-gray p-4 rounded-xl my-4">
      <h2 className="text-2xl mb-2">Ritual Altar</h2>
      <button
        className="bg-red-800 hover:bg-green-800 text-bone-white py-2 px-4 rounded"
        onClick={handleRitual}
        disabled={loading}
      >
        {loading ? 'Performing...' : 'Perform Ritual'}
      </button>
    </div>
  );
}


`src/components/LoreVault.tsx

import { useAccount } from 'wagmi';
import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import { THE_OSSUARY_ADDRESS, THE_OSSUARY_ABI } from '../constants';

export default function LoreVault() {
  const { address } = useAccount();
  const [fragments, setFragments] = useState<number[]>([]);

  useEffect(() => {
    const fetchLore = async () => {
      if (!address) return;
      const provider = new ethers.BrowserProvider(window.ethereum);
      const contract = new ethers.Contract(THE_OSSUARY_ADDRESS, THE_OSSUARY_ABI, provider);
      const ids = await contract.playerLoreFragments(address);
      setFragments(ids.map((id: bigint) => Number(id)));
    };
    fetchLore();
  }, [address]);

  return (
    <div className="bg-crypt-gray p-4 rounded-xl my-4">
      <h2 className="text-2xl mb-2">Lore Vault</h2>
      <ul>
        {fragments.map(id => (
          <li key={id}>Fragment ID: {id}</li>
        ))}
      </ul>
    </div>
  );
}


`src/components/BookOfBone.tsx